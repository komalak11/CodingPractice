package CTCI;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;

public class StackOfPlates {
	private static final int Stack_Size = 5;
	private LinkedList<Stack<Integer>> stacks = new LinkedList<Stack<Integer>>();
	public void push(int item) {
		if(stacks.isEmpty() || stacks.getLast().size()>=Stack_Size) {
			Stack<Integer> stack = new Stack<>();
			stack.push(item);
			stacks.add(stack);
		}
		else {
			stacks.getLast().push(item);
		}
	}
	public Integer pop() {
		if(stacks.isEmpty()) {
			System.out.println("Stack is empty");
		}
		Stack<Integer> last = new Stack<>();
		int item = last.pop();
		if(last.isEmpty()) {
			stacks.removeLast();
		}
		return item;
	}
	public Integer popAtIndex(int index) {
		if(stacks.isEmpty()) {
			System.out.println("Stack is empty");
		}
		if(index<0||index >=stacks.size()) {
			System.out.println("Invalid index");
		}
		int item = stacks.get(index).pop();
		for(int i =index;i<stacks.size()-1;++i) {
			Stack<Integer> current = stacks.get(i);
			Stack<Integer> next = stacks.get(i+1);
			current.push(next.remove(0));
		}
		if(stacks.getLast().isEmpty()) {
			stacks.removeLast();
		}
		return item;
	}
	public void printStacks() {
		for(Stack<Integer> stack:stacks) {
			for(int item:stack) {
				System.out.print(item+" ");
			}
			System.out.println("[TOP]");
		}
	}
	public static void main(String[] args) {
		StackOfPlates plates = new StackOfPlates();
		plates.push(1);
		plates.push(2);
		plates.push(3);
		plates.push(4);
		plates.push(5);
		plates.push(6);
		plates.printStacks();
		plates.popAtIndex(3);
		plates.printStacks();
	}
}
